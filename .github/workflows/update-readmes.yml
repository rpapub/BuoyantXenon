name: Update README with Release Branches

on:
  workflow_dispatch:
  schedule:
    - cron: "15 8 * * *"  # Runs every day (UTC)
jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update README
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_CPRIMA_FOR_RPAPUB }}
        run: |
          cd "${{ runner.temp }}"
          repos=("rpapub/REFramework-VB-legacy" "rpapub/REFramework-CSharp-legacy" "rpapub/REFramework-VB-Windows" "rpapub/REFramework-CSharp-Windows")
          PRE_COMMENT="<!-- START OF AUTO-GENERATED CONTENT -->"
          POST_COMMENT="<!-- END OF AUTO-GENERATED CONTENT -->"

          for repo in "${repos[@]}"; do
              echo "Updating README for $repo"
              ls
              sleep 5
              git clone https://x-access-token:$GITHUB_TOKEN@github.com/$repo "$(basename $repo)"
              cd "$(basename $repo)"
              pwd

              git checkout readme || git checkout -b readme
              branches=$(git branch -r | grep 'release/v')
              
              new_content="$PRE_COMMENT\n# Release Branches\n"
              for branch in $branches; do
                  # Remove the remote part (e.g., origin/) and keep the branch name
                  branch_name="${branch#*/}"
                  new_content+="- [$branch_name](https://github.com/$repo/tree/$branch_name)\n"
              done
              new_content+="$POST_COMMENT"

              echo "$new_content"
              if grep -q "$PRE_COMMENT" README.md; then
                  echo "previous content detected, will try to replace"
                  awk -v new_content="$new_content" '
                      BEGIN { skip = 0 }
                      /<!-- START OF AUTO-GENERATED CONTENT -->/ { print; print new_content; skip = 1 }
                      /<!-- END OF AUTO-GENERATED CONTENT -->/ { skip = 0; next }
                      skip { next }
                      { print }
                  ' README.md > README.tmp && mv README.tmp README.md
              else
                  echo "no previous content detected, appending to README"
                  echo -e "\n$new_content" >> README.md
              fi
              cat README.md
              git add README.md
              # Check for changes
              if git diff --staged --quiet; then
                  echo "No changes to commit."
              else
                  COMMIT_MSG="Update README with vendor UiPath's release branches - commit $(date +"%Y-%m-%d")"
                  git commit -m "$COMMIT_MSG"
                  git push -u origin readme
              fi
              git push -u origin readme

              cd ..
          done
          rm -rf "$TEMP_DIR"
